import os
import logging
from datetime import datetime
from time import sleep
import ctypes
import json
import time
import re
import psutil

from colorama import Fore
from telethon.sync import TelegramClient, errors
from telethon.errors.common import InvalidBufferError
from telethon.errors import SessionPasswordNeededError

log_file_path = 'errors.log'
if os.path.exists(log_file_path):
    open(log_file_path, 'w').close()

def create_proxy_file(filename='proxy.txt'):
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ proxy.txt, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if not os.path.exists(filename):
        with open(filename, 'w') as file:
            pass 

logging.basicConfig(filename='errors.log', level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')

def set_console_title(new_title):
    ctypes.windll.kernel32.SetConsoleTitleW(new_title)

def print_success(message):
    print(f"{message}")

def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

new_title = "TD"
#set_console_title(new_title)

logo = f"""                              
             ____  ____  ____  ___  ____  __   
            (  _ \( ___)(  _ \/ __)(_  _)(  )  
             )___/ )__)  )   /\__ \ _)(_  )(__ 
            (__)  (____)(_)\_)(___/(____)(____)
                
            Version [2]
            –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:persil
            TeleGram:@persilj                                                                                                                          
"""
print(logo)
create_proxy_file()
def load_session():
    session_file = 'session.json'
    if os.path.exists(session_file):
        with open(session_file, 'r') as file:
            session = json.load(file)
        if 'api_id' in session and 'api_hash' in session:
            return session
    return None
def save_session(session):
    session_file = 'session.json'
    with open(session_file, 'w') as file:
        json.dump(session, file)

session = load_session()

if session is None:
    api_id = input('–í–≤–µ–¥–∏—Ç–µ API:')
    api_hash = input('–í–≤–µ–¥–∏—Ç–µ API-HASH:')
    session = {'api_id': api_id, 'api_hash': api_hash}
    save_session(session)
else:
    api_id = session['api_id']
    api_hash = session['api_hash']

def read_proxy_from_file(filename):
    try:
        with open(filename, 'r') as file:
            proxy = file.readline().strip()
        return proxy
    except FileNotFoundError:
        print("–§–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

def parse_proxy(proxy):
    pattern = r'^(.*?):(.*?)@(.*?):(.*?)$'
    match = re.match(pattern, proxy)
    if match:
        return {
            'proxy_type': 'socks5',
            'addr': match.group(3),
            'port': int(match.group(4)),
            'username': match.group(1),
            'password': match.group(2)
        }
    else:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏.")
        return None

use_proxy = input('–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏? [–¥–∞/–Ω–µ—Ç]: ').lower()

device_model = 'SM0123456722'
app_version = '4.16.30-vx13'

if use_proxy == '–¥–∞':
    proxy = read_proxy_from_file('proxy.txt')
    if proxy:
        proxy_obj = parse_proxy(proxy)
        if proxy_obj:
            client = TelegramClient('session', api_id, api_hash, proxy=proxy_obj, device_model=device_model, app_version=app_version)
        else:
            client = TelegramClient('session', api_id, api_hash, device_model=device_model, app_version=app_version)
    else:
        client = TelegramClient('session', api_id, api_hash, device_model=device_model, app_version=app_version)
else:
    client = TelegramClient('session', api_id, api_hash, device_model=device_model, app_version=app_version)

try:
    client.start()
except SessionPasswordNeededError:
    password = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA:')
    client = client.start(password=password)
else:
    clear_console()
    print(logo)

account_name = client.get_me().first_name
print(f"–ê–∫–∫–∞—É–Ω—Ç: {account_name}")
delay = int(input('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: '))         

def send_statistics(client, username, total_messages_sent, total_time, delay, rounds_completed):
    try:
        messages = client.get_messages(username, limit=1)
        for message in messages:
            if "**ü§û–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é:**" in message.text:
                # –£–¥–∞–ª—è–µ–º –µ–≥–æ
                client.delete_messages(username, message.id)
        next_round_time = delay / 60
        total_seconds = int(total_time)
        message = (
            f"**ü§û–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é:**\n"
            f"**üöÄ–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:**\n\n"
            f"**üí¨–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** `{total_messages_sent}`\n"
            f"**‚è≥–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:** `{total_seconds}` **—Å–µ–∫—É–Ω–¥**\n"
            f"**‚úîÔ∏è–ö—Ä—É–≥ –∑–∞–∫–æ–Ω—á–∏–ª —É—à–µ–ª –≤ —Å–æ–Ω –Ω–∞:** `{delay}` **—Å–µ–∫—É–Ω–¥**\n"
            f"**üîÑ–ö—Ä—É–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** `{rounds_completed}`\n"
            f"**‚ôªÔ∏è–°–ª–µ–¥—É—é—â–∏–π –ö—Ä—É–≥ —á–µ—Ä–µ–∑:** `{next_round_time:.2f}` **–º–∏–Ω—É—Ç**\n\n"
            f"**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –û–ó–£:** `{psutil.virtual_memory().percent}`\n\n "
            f"**‚ôæ–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å‚ÄºÔ∏è**"
        )
        
        client.send_message(username, message, parse_mode='markdown')
        if psutil.virtual_memory().percent >= 96:
        
            client._entity_cache.clear()
            client._mb_entity_cache.hash_map.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logging.error(f"Error while sending statistics: {e}")


def send_start_message(client):
    try:
        client.send_message("@SpamBot", "/start")
        time.sleep(3)
        client.send_message("@SpamBot", "/start")
    except errors.FloodError as e:
        if e.message == "BAD_REQUEST":
            # –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ Flood: BAD_REQUEST, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑
            send_start_message(client)
        else:
            logging.error(f'Flood error: {e.message}')
    except Exception as exc:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}')

def create_groups_list(client, groups=None):
    if groups is None:
        groups = []

    for dialog in client.iter_dialogs():
        if dialog.is_group and dialog.unread_count > 0:  
            groups.append(dialog) 

    return groups  

def spammer(client, send_stats, username,):
    total_messages_sent = 0
    start_time = datetime.now()
    rounds_completed = 1

    with client:
        for m in client.iter_messages('me', 1):
            msg = m

        while True:
            print("–†–∞—Å—Å—ã–ª–∞—é...")
            groups = create_groups_list(client) 
            for g in groups[:1000]:
                try:
                    client.forward_messages(g, msg, 'me')
                    total_messages_sent += 1
                except errors.ChatWriteForbiddenError as chat_write_error:
                    logging.error(f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {chat_write_error}') 
                    continue
                except errors.ForbiddenError as o:
                    logging.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {o}')
                    client.delete_dialog(g)
                    if g.entity.username is not None:
                        logging.error(f'–û—à–∏–±–∫–∞: {o.message}. –ê–∫–∫–∞—É–Ω—Ç –ø–æ–∫–∏–Ω—É–ª @{g.entity.username}')
                    else:
                        logging.error(f'–û—à–∏–±–∫–∞: {o.message}. –ê–∫–∫–∞—É–Ω—Ç –ø–æ–∫–∏–Ω—É–ª {g.name}')
                        continue
                except errors.FloodError as e:
                    if e.seconds > 120:
                        continue
                    else:
                        logging.error(f'Flood: {e.message} –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥')
                        sleep(e.seconds)
                        continue
                except errors.UserNotParticipantError as user_not_participant_error:
                    logging.error(f'UserNotParticipantError: {user_not_participant_error}')
                    continue
                except errors.MessageTooLongError:
                    logging.error(f'Message was too long ==> {g.name}')
                    continue
                except errors.BadRequestError as i:
                    logging.error(f'Flood: {i.message}')
                    if i.message == "BAD_REQUEST":
                        # –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ BAD_REQUEST –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É
                        send_start_message(client)
                    continue
                except errors.RPCError as rpc_error:
                    logging.error(f'RPCError: {rpc_error}')
                    continue
                except InvalidBufferError:
                    logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—É—Ñ–µ—Ä–∞: InvalidBufferError')
                    continue
                except Exception as exc:
                    logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}')
                    continue

            end_time = datetime.now()
            total_time = (end_time - start_time).total_seconds()
            clear_console()
            account_name = client.get_me().first_name
            print_success(f"–ê–∫–∫–∞—É–Ω—Ç: {account_name}")
            print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', total_messages_sent)
            print(f"–£—à–µ–ª –≤ —Å–æ–Ω –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥...")

            if send_stats.lower() == "–¥–∞":
                send_statistics(client, username, total_messages_sent, total_time, delay, rounds_completed)
            sleep(delay)
            rounds_completed += 1

            groups.clear()

def main():
    send_stats = input("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É [–î–∞/–ù–µ—Ç]: ")
    if send_stats.lower() == "–¥–∞":
        username = input("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞: ")
    else:
        username = None

    spammer(client, send_stats, username)

if __name__ == '__main__':
    main() 